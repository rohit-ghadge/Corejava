
What is an interface?

An interface is contract which specifies the behavior that a class must implement. The purpose of an interface is to provide multiple implementations to the class. An interface in Java 8 can have abstract methods, static methods and default methods.

NOTE: Compiler automatically converts methods of Interface as public and abstract, and the data members as public, static and final by default.

ex-int mango=40; it compiler convert to (public static final int mango=40;).

in abstract class we can use all types of the variables.

Methods inside Interface must not be static, final, native or strictfp.
Interface can be nested inside another interface.
-----------------------------------------------------------------------------------------------------------------------

three types of the interface:

1:normal interface:-
			-An interface in Java 8 can have (abstract methods, static methods and default methods).
		     -default method have default keyword. it is not mandatory to override it in subclass.
            default method:-
 			When you want to add new functionality to an existing interface without breaking the contract, 			then you can use default methods. For creating default methods, use default keyword and add definition 				for the method.
               static method:-
					Static methods in an interface are similar to default methods. When you want to add new 						functionality to an existing interface without breaking the contract, then you can use 						static methods. But it cannot be overridden. 
					
			
2:funtional interface:-(ONE abstract method)
                -we can use @FunctionalInterface anotation.
			 -A functional interface is an interface with only one (abstract method)
			 - But it can have default and static methods
                Lambda expresstion-
				-it is used in the functional interface
				-it is used to do write less code.
				-it reduce the bioler plate code.
				  @FunctionalInterface
				   interface abc
				   {
					  void show();
				   }
				   public class interfacedemo
				   {
					  public static void main(String str[])
					  {
						 abc obj = () -> System.out.println("in the print");
						 obj.show();
					  }
				   }	
ex comparable comparator Runnable Callable 
							  
3:markup interface:-(ZERO abstract method)
     what is it exatly ?
     It is an empty interface (no field or methods). Examples of marker interface are Serializable, Clonnable and      		Remote interface. All these interfaces are empty interfaces. 
    
     1:-serilization-
                 java is the preety secure langauge it is not bydefault saving object int file.
                 Serializable interface is present in java.io package. It is used to make an object eligible for    				  saving its state into a file. This is called Serialization.

    import java.io.Serializable;  
    public class Student implements Serializable{  
     int id;  
     String name;  
     public Student(int id, String name) {  
      this.id = id;  
      this.name = name;  
     }  
    }  
        import java.io.*;  
    class Persist{  
     public static void main(String args[]){  
      try{  
      //Creating the object  
      Student s1 =new Student(211,"ravi");  
      //Creating stream and writing the object  
      FileOutputStream fout=new FileOutputStream("f.txt");  
      ObjectOutputStream out=new ObjectOutputStream(fout);  
      out.writeObject(s1);  
      out.flush();  
      //closing the stream  
      out.close();  
      System.out.println("success");  
      }catch(Exception e){System.out.println(e);}  
     }  
    }  


   Deserialization is the process of reconstructing the object from the serialized state. It is the reverse operation of serialization. Let's see an example where we are reading the data from a deserialized object.


    import java.io.*;  
    class Depersist{  
     public static void main(String args[]){  
      try{  
      //Creating stream to read the object  
      ObjectInputStream in=new ObjectInputStream(new FileInputStream("f.txt"));  
      Student s=(Student)in.readObject();  
      //printing the data of the serialized object  
      System.out.println(s.id+" "+s.name);  
      //closing the stream  
      in.close();  
      }catch(Exception e){System.out.println(e);}  
     }  
    }  


2:-Clone() method in Java

		Object cloning refers to creation of exact copy of an object. It creates a new instance of the class of 			current object and initializes all its fields with exactly the contents of the corresponding fields of this 			object.
		The class must also implement java.lang.Cloneable interface whose object clone we want to create otherwise 			it will throw CloneNotSupportedException when clone method is called on that classâ€™s object.

----------------------------------------------------------------------------------------------------------------------
As of Java 8 interfaces can define default methods.

    Default methods are non-abstract methods.(they have body)
    Default methods start with a default keyword and contain a body like class methods do.

    RBI bank example. sbi icici 


